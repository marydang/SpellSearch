--
-- SpellSearch
--
-- WoW addon for searching spells in your Spell Book.
--
--(c) Tessalina of Cenarion Circle
-- dangster@gmail.com
--
-- TO DO: figure out how to make the frame clear when:
-- 1. user switches to an inactive spellbook/spec
-- 2. user clicks on a tab other than spellbook
-- 3. user exits out of spellbook (actually it already does this, but we need
-- to clear the results
-- 
-- TO DO: add open source header to each file
-- TO DO: consider what will happen when the user re-specs

--
-- Module Constants
--

local SS_prefix_table
local SS_slash_command_frame
local SS_result_frame_max = 6

-- Upvalues, for convenience
local _UTIL        = FitzUtils;
local _L           = SpellSearch.Text;
local _MAIN        = SpellSearch;

-- Disable/enable debug output
_UTIL:Debug(true)

-- Helper function for converting a result list into string
-- TO BE REMOVED AT A LATER DATE
local function ListToString(list)
   local list_string = ""
   for n = 1, #list do
      local spell_attr = list[n]
      for index, value in pairs(spell_attr) do
         list_string = list_string .. index .. ": " .. value .. "\n"
      end
      list_string = list_string .. "\n"
   end
   return list_string
end


-- Create the spell attribute table for the given spell atttributes. We're not
-- using all of them at them moment, but they may come in handy later.
local function CreateSpellAttributes(spell_name, spell_id, spellbook_id, 
                                     tab_name, tab_id, page_num)
   local spell_attributes = { name = spell_name, spell_ID = spell_id, 
      spellbook_ID = spellbook_id, tab = tab_name, tab_ID = tab_id, 
      page_number = page_num }
   return spell_attributes
end

-- Scan the user's spells and store them in a prefix table.  Only search in
-- the user's General and current spec tab.
local function ScanStoreSpells()
   local num_tabs = GetNumSpellTabs()
   SS_prefix_table = PrefixTable:New()
   -- 1 = General, 2 = Current Spec
   for tab_num = 1, 2 do
      local tab_name, texture, offset, tab_num_spells = 
         GetSpellTabInfo(tab_num)
      for spell_num = offset + 1, offset + tab_num_spells do
         local spell_name, subtext = GetSpellBookItemName(spell_num, "spell")
         local skill_type, spell_id = GetSpellBookItemInfo(spell_name)
         if spell_id ~= nil then
            local page_num = math.ceil((spell_num-offset) / 12)
            local spell_attributes = 
               CreateSpellAttributes(spell_name, spell_id, spell_num, 
                                     tab_name, tab_num, page_num)     
            SS_prefix_table:Add(spell_name, spell_attributes)
         end    
      end
   end
end

-- Search for spells that begin with the argument string.  We'll automatically
-- capitalize the first letter in the search string, since the spell names
-- are stored that way in the prefix table.
local function SearchSpell(search_string)
   _UTIL:Debug("Searching for \"" .. search_string .. "\" ...")
   HideSpellFrameResults()
   search_string = _UTIL:CapitalizeFirstLetter(search_string)
   if SS_prefix_table:Exists(search_string) then
      local result_list = SS_prefix_table:GetList(search_string)
      _UTIL:Debug("Search results:\n" .. ListToString(result_list))
      if (#result_list <= SS_result_frame_max) then
         UpdateSpellFrameResults(result_list)
      else
         _UTIL:Debug("Too many results")
          DisplaySearchText("Too many results")
      end
   else
      _UTIL:Debug("No spells found!")
      DisplaySearchText("No spells found!")
   end
end 

--
-- Slash Commands
--

-- Helper to create help output from the command table.
local function HelpCmdHelper(cmd_tbl, s, prefix)
   prefix = prefix or ""
   for cmd,v in pairs(cmd_tbl) do
      if v.help then
         print(table.concat( { s.._UTIL:ColorText(prefix..cmd),
                               s.." "..v.help },
                             "\n"))
      else
         print(HelpCmdHelper(v, s, cmd.." "))
      end
   end
end

-- Handlers for all slash command functionality.
_HANDLERS = {
   [_L["about"]] = {
      help = _L["Nothing here about SpellSearch yet."],
      run  = function()
        _UTIL:Info(_MAIN.AboutString)
      end,
   },
   [_L["help"]] = {
      help = _L["To run a spell search via command line, type: " ..
         "/spellsearch search [search string]"],
      run  = nil,
   },
   [_L["printall"]] = {
      help = _L["This debug command prints all of the user's spells"],
      run = ScanSpells
   },
   [_L["scan"]] = {
      help = _L["This debug command scans the user's spells and saves " ..
         "them to a table"],
      run = ScanStoreSpells
   },
   [_L["search"]] = {
      help = _L["To run a spell search via command line, type: " ..
         "/spellsearch search [search string]"],
      run  = SearchSpell,
   },
}

-- Dispatch, based off of ideas in "World of Warcraft Programmng 2nd Ed"
-- These variables are set in global scope.
SLASH_SPELLSEARCH1 = _L["/spellsearch"]
SLASH_SPELLSEARCH2 = _L["/ss"]

local function HandleSlashCmd(msg, tbl)
   local cmd, param = string.match(msg, "^(%w+)%s*(.*)$")
   cmd = cmd or ""
   local e = tbl[cmd:lower()]
   if not e or cmd == _L["help"] then
      -- Not recognized, output slash command help
      _UTIL:Info(SLASH_SPELLSEARCH1)
      _UTIL:Info(SLASH_SPELLSEARCH2)
      HelpCmdHelper(_HANDLERS, "      ")
   elseif e.run then
      e.run(param)
   else
      HandleSlashCmd(param or "", e)
   end
end

-- Register commands.
SlashCmdList["SPELLSEARCH"] = function (msg) HandleSlashCmd(msg, _HANDLERS) end

-- Register the events.  So far this contains all of the possible events we
-- *might* need, but will have to remove some of these later.
local function HandleEvents()
   SS_slash_command_frame = CreateFrame("FRAME", "SpellSearchCLIFrame")
   SS_slash_command_frame:RegisterEvent("ACTIVE_TALENT_GROUP_CHANGED")
   SS_slash_command_frame:RegisterEvent("COMPANION_LEARNED")
   SS_slash_command_frame:RegisterEvent("COMPANION_UNLEARNED")
   SS_slash_command_frame:RegisterEvent("CONFIRM_TALENT_WIPE")
   SS_slash_command_frame:RegisterEvent("LEARNED_SPELL_IN_TAB")
   SS_slash_command_frame:RegisterEvent("PLAYER_TALENT_UPDATE")
   SS_slash_command_frame:RegisterEvent("SKILL_LINES_CHANGED")
   SS_slash_command_frame:RegisterEvent("SPELLS_CHANGED")
   SS_slash_command_frame:SetScript("OnEvent", ScanStoreSpells)
end

-- Handler for the search
function HandleSearch(self)
   local search_string = GetSearchString()
   SearchSpell(search_string)
end


-- Init -- Called only after "ADDON_LOADED" event fires
local function Init()
   _UTIL:Debug("Initializing SpellSearch. . . ")
   local version = GetAddOnMetadata("SpellSearch","Version")
   _MAIN.TitleString =  _L["SpellSearch"].." v"..version
   _MAIN.AboutString = _MAIN.TitleString.._L[", by Tessalina of Uldaman US"]
   HandleEvents()
   CreateUI()
   _UTIL:Info(_MAIN.TitleString.._L[" loaded successfully!  Type /ss for options."])
   _UTIL:Debug("SpellSearch Initialized!")
end

Init()
